TODO for 1.0.-2:
* Sometimes the copy does not adjust timestamps; it may be a create(A)
  followed by rename(A, B) which does not take the timestamp from the rename
* have a separate lock for watch structure, without using the queue lock;
  must be careful of deadlocks as some code will need to lock both
* dev_t can be 64 bits (in Linux) and ino_t can be 64 bits (in BSD); find
  all places where they are treated as ints, and replace that with int64_t
* check "exclude" on directory renames: if the new name is excluded, we need
  to remove the watch after queueing the rename event
* split config.c into config.c and config-package.c
* rewrite config.c to use a table instead of the huge switch(); the
  table could also be used to print the current configuration (and would
  be provided by config-package.c); doesn't have to be very efficient to
  search by keyword (unlike control thread) as it's used rarely.
* should.conf(5) manpage
* should.1 - external_copy
* change external_copy to open on demand and close as soon as a different
  type of event, or a timeout, occurs
* add a signal handler for SIGABRT and make sure it does not return (this
  is not as easy as it sounds as we need to figure out what to do with the
  thread which called it), This is to stop librsync being dangerous. May
  be easier to rewrite librsync to behave sensibly.
* server: if disallow_unix removes the last user, need to make the socket
  accessible by the owner only (if then allow_unix adds a user again, it
  can give the socket more permissions). This is only important during
  config_commit_update. Or maybe we just prohibit removing the last user.
* librsync will send data for signatures and deltas in small chunks;
  see if we can batch it.
* server - IGNORE command and EXTENSION
* copy - multi-master mode, connects to a local server as well as a remote
  one, and uses IGNORE on the local server before doing any file operation as
  a result of replication from the remote server.
* review and test initscripts
* review and test extra fork and cleanup
* review and test timed / periodic dirsync

Possible future improvements:
* the code could do with some more documentation
* a nicer interface to the "should" configuration
* disallow_unix / disallow_tcp - accept a socket/host and remove them
  from the existing list
* link encryption (ENCRYPT command and EXTENSION, etc).
* lzo compression
* generate locale files with the error messages instead (or in addition to)
  of reading them from config
* split out client code to a client library to connect/do things/etc, which
  encapsulates the protocol and just offers library calls. Modify client.c
  and Should::Client to use this library.
* maybe the control thread could provide periodic stats (if enabled in config)
* "should remove" could also remove the parent watch (etc) if its only subdir
  has just been removed
* "should remove" could also do with a "find" parameter (or else the client
  could have a command which gets the list of watches, selects some from it,
  and issues a "remove" on the ones which match).
* Add a config parameter to increase fs:inotify:max_user_watches and
  fs:inotify:max_queued_events on startup, possibly automatically tweaking
  them somehow if possible and limits are about to be reached.
* monitor fs:inotify:max_user_watches and fs:inotify:max_queued_events and
  possibly autoincrease them depending on configurable limits
* allow to dynamically load "store" methods if not predefined in
  store_thread.c:store_init()
* "retry" mode where if the server/copy dies and it has not been explicitely
  stopped the wrapper process will wait some time (specified by retry=interval)
  and then try again. This means running the second fork() in a loop and
  checking for exit via stop.
* [i]exclude_event[_path][_glob] -- filter events by name/path (in addition
  to the existing filter by event type / object type)
* improve the check whether a file needs to be copied during dirsync by
  using the event we've already created from get_local_dir()

