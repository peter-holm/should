#!/bin/sh

# start/stop should daemon(s)

# this file is part of SHOULD

# Copyright (c) 2008, 2009 Claudio Calvelli <should@shouldbox.co.uk>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program (see the file COPYING in the distribution).
# If not, see <http://www.gnu.org/licenses/>.

# For Debian
### BEGIN INIT INFO
# Provides:          should
# Required-Start:    $syslog
# Required-Stop:     $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Should file replication and copy helper
# Description:       Should is a daemon which records file change events
#                    provided by inotiry and can replicate such events to
#                    another place.  It can also help with remote file copy
#                    in cases where rsync and scp aren't working properly.
### END INIT INFO

SHOULD_BIN=''
oldIFS="$IFS"
IFS=:
for path in $PATH:/usr/local/bin:/usr/bin
do
    if test -x "$path/should"
    then
	SHOULD_BIN="$path/should"
	ETC_DIR="`echo "$path" | sed -e 's,s*bin,etc,'`"
    fi
done
IFS="$oldIFS"
if [ "$SHOULD_BIN" = '' ]
then
    exit 0
fi

if test -d "$ETC_DIR"
then
    :
elif test -d /usr/local/etc/should
then
    ETC_DIR=/usr/local/etc/should
elif test -d /usr/etc/should
then
    ETC_DIR=/usr/etc/should
elif test -d /etc/should
then
    ETC_DIR=/etc/should
else
    echo "Missing should configuration directory" >&2
    exit 1
fi

cd "$ETC_DIR" || exit 1

# prevent should from loading the generic configuration files; include them
# from $ETC/name.conf if required
SHOULD_USER=/dev/null
SHOULD_SYSTEM=/dev/null
export SHOULD_USER SHOULD_SYSTEM

stop_daemon () {
    name="$1"
    result=0
    PID="`"$SHOULD_BIN" skip_notice name="${name%.conf}" \
			config="$name" pid 2>/dev/null`"
    if [ "$PID" != '' ]
    then
	"$SHOULD_BIN" skip_notice name="${name%.conf}" \
		      config="$name" stop || result=1
	retry=''
	signal=0
	while kill -$signal "$PID" 2>/dev/null
	do
	    sleep 1
	    retry="x$retry"
	    if [ "$retry" = xxxxxxxxxx ]
	    then
		signal=15
	    fi
	    if [ "$retry" = xxxxxxxxxxxxxxx ]
	    then
		signal=9
	    fi
	done
    fi
    return $result
}

case "$1" in
    start)
	title="Starting should daemon:"
	nl=''
	val=0
	for name in *.conf
	do
	    if [ -r "$name" ]
	    then
		PID="`"$SHOULD_BIN" skip_notice name="${name%.conf}" \
				    config="$name" pid 2>/dev/null`"
		if [ "$PID" == '' ]
		then
		    echo -n "$title ${name%.conf}"
		    title=''
		    nl='
'
		    "$SHOULD_BIN" 'report:detach=none' skip_notice \
				  name="${name%.conf}" \
				  config="$name" start detach || val=1
		fi
	    fi
	done
	echo -n "$nl"
	exit $val
	;;
    stop)
	title="Stopping should daemon:"
	nl=''
	val=0
	for name in *.conf
	do
	    if [ -r "$name" ]
	    then
		echo -n "$title ${name%.conf}"
		title=''
		nl='
'
		stop_daemon "$name" || val=1
	    fi
	done
	echo -n "$nl"
	exit $val
	;;
    restart)
	title="Restarting should daemon:"
	nl=''
	val=0
	for name in *.conf
	do
	    if [ -r "$name" ]
	    then
		PID="`"$SHOULD_BIN" skip_notice name="${name%.conf}" \
				    config="$name" pid 2>/dev/null`"
		if [ "$PID" != '' ]
		then
		    echo -n "$title ${name%.conf}"
		    title=''
		    nl='
'
		    stop_daemon "$name" || val=1
		    "$SHOULD_BIN" 'report:detach=none' skip_notice \
				  name="${name%.conf}" \
				  config="$name" start detach || val=1
		fi
	    fi
	done
	echo -n "$nl"
	exit $val
	;;
    status)
	val=0
	for name in *.conf
	do
	    if [ -r "$name" ]
	    then
		PID="`"$SHOULD_BIN" skip_notice name="${name%.conf}" \
				    config="$name" pid 2>/dev/null`"
		if [ "$PID" != '' ]
		then
		    echo "${name%.conf}: running (PID=$PID)"
		else
		    echo "${name%.conf}: NOT running"
		    val=1
		fi
	    fi
	done
	exit $val
	;;
    *)
	echo "Usage: $0 start|stop|status|restart"
	exit 1
	;;
esac

