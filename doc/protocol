Protocol used by copies of "should" to communicate.

A "should" client will connect to a "should" server using a Unix domain
socket or a TCP network connection, depending on configuration and
command-line options. A client in copy mode behaves as a server and
can also be controlled this way, however the set of commands is limited.
The description of each command in this document indicate the mode
(server, copy, all) in which it is available.

The first thing the server will do is authenticate the client and check
authorisation. This will also determine which commands a user will be allowed
to issue.

For Unix domain connections, the server looks up the user ID of the client,
and translates it to a user name: if the user is listed in a configuration
option of the form: "allow_unix=USER" the client will be allowed to proceed,
otherwise it will be disconnected with an error messsage.

For TCP connections, the server issues a challenge in the form:

    SHOULD [xxxxxxxxxxxxxxxx]

or

    SHOULD [xxxxxxxxxxxxxxxx] checksum_name...

where xxxxxxxxxxxxxxxx is a 16-digit hex random number, and checksum_name
is a list of checksum algorithms understood by the server (if none is
specified, the client will assume MD5).

The client then produces a hash of (username, xxxxxxxxxxxxxxxx, password)
and returns a result of the form:

    username hash

or

    username [checksum_name] hash

the second form can only be used if the server returned a list of checksum
algorithms (older servers did not send the list and would not understand
this reply); the first form uses MD5 implicitely.

Before opening a TCP connection, the client checks that it does have a
username and password. This can be in a configuration file using options
"user=USER" and "password=PASSWORD". It can also be in the command line,
although this is not secure. If either is missing, the program will
prompt the user.

The username determines which operations are allowed (depending on the
server's allow_unix and allow_tcp options). The description of each
command in this document indicates the required permission after the
mode, for example (all, stop) means that the command is available in
all modes and requires the "stop" permission, and (server, read) means
that the command is available in server mode and requires the "read"
permission; "any" means that the command is available as long as the
user can connect, although the result may deepend on the actual
permissions available.

Once authentication and authorisation succeed, the client starts issuing
commands and waiting for replies from the server, until the connection
is dropped or the client issues the "QUIT" command. Each line from the
client and from the server terminates with a carriage return, line feed
sequence.

To simplify memory allocation both in the server and in the client, and
to avoid the need to escape special characters in names, any path name
will be sent as a number, indicating its length in bytes, followed by
the name after the line feed. For example, to add a watch "/home/user",
the client could say:

    ADD 10\015\012
    /home/user

(note that there is no carriage return, line feed after the name). To
simplify the descriptions, the above command is written as:

    ADD (watch)

where it is understood that any element in parentheses is replaced by
its length, and the actual data will follow after the new line. If there
is more than one such data item, they will follow in the order they
appear in the command line.

Replies from the server always start with "OK" if successful, otherwise
they contain an error message (which will never start with "OK"). If
a command requires a multiline reply, this will follow the "OK" line,
and the command's description specifies how the server indicates the
end of the multiline reply.

The following commands are recognised by the current server code:

EXTENSIONS
(all, any)
    This command is only available in version 1.1 or later of the
    protocol; a server using an older version will return an error.

    The server sends a multiline reply, terminated with a line containing a
    single dot. Each line in the reply is the name of a supported protocol
    extension; the client must ignore any extension it does not know about.
    Currently, the following extensions can be provided:

    CHECKSUM
	The server accepts the CHECKSUM command.

    DIRSYNC
	This server is operating in copy mode and supports the DIRSYNC command.

    ENCRYPT
	The server supports the ENCRYPT command.

    IGNORE
	The server supports the IGNORE command.

    RSYNC
	The server is linked against librsync and provides the RSYNC,
	SIGNATURE and DELTA commands.

    UPDATE
	The server supports the UPDATE command.

DEBUG
(all, debug)
    The server will produce extra debugging information about this client's
    connection, even if started without debugging.

NODEBUG
(all, debug)
    The server will not produce extra debugging information about this client's
    connection, even if started with debugging.

QUIT
(all, any)
    The server will close connection. This command is always successful.

STOP
(all, stop)
    The server will stop; the current connection is closed as soon as the
    command is processed, so there is no need to issue a QUIT as well.
    This command is always successful.

STATUS
(all, status)
    The server sends a multiline reply, terminated with a line containing a
    single dot. Each line in the reply has the format: "KEYWORD: NUMBER",
    and the server currently sends the following:

    server_mode        1
    clients            number of client connections received
    events             number of events recorded since server startup
    file_current       current event log file
    file_earliest      earliest available event log file
    file_pos           number of bytes in current event log file
    kernel_max_watches the maximum number of watches per user
    kernel_max_events  the kernel's event queue size
    max_bytes          maximum number of bytes used for queued events, since
                       server startup
    max_events         maximum number of events in queue, since server startup
    memory             number of bytes or memory allocated dynamically
    overflow           number of times the queue overflowed
    pid                the server's Process ID
    queue_bytes        number of bytes of memory used by event queue
    queue_cur          number of bytes currently allocated to event queues
    queue_events       events currently waiting to be stored to log file
    queue_max          maximum queue size, in bytes
    queue_min          minimum queue size, in bytes
    running            the time (seconds.milli) the server has been running
    shouldbox          the number of "shouldn't happen" errors
    systime            system CPU time (seconds.milli) used by the server
    too_big            number of events too big to store in the queue
    usertime           user CPU time (seconds.milli) used by the server
    version            server version
    watches            number of directories being watched
    watchmem           number of bytes of memory used for watches

    In copy mode, the following will be sent:
    server_mode        0
    clients            number of client connections received
    pid                the server's Process ID
    running            the time (seconds.milli) the server has been running
    shouldbox          the number of "shouldn't happen" errors
    systime            system CPU time (seconds.milli) used by the server
    usertime           user CPU time (seconds.milli) used by the server
    version            server version
    memory             number of bytes or memory allocated dynamically
    events_copied      number of events copied since startup
    event_time         time spent processing events
    read_file_num      event file number being processed
    read_file_pos      position in event file
    pending_dirsyncs   number of paths in the current dirsync queue
    bytes_received     total number of bytes received from server
    bytes_sent         total number of bytes sent to server
    file_data_total    total size of file data copied
    file_data_xfer     size of file data actually copied

    Older servers did not send server_mode; however they did not listen
    for commands in copy mode, so if this keyword is missing the client
    can assume that the server is operating in server mode.

ADD (watch)
(server, add)
    The server prepares to add a watch on the directory specified. Data
    structures are allocated at this point, but the watch is not added yet,
    waiting for the client to provide any further options.

CROSS
(server, add)
    Completes a current ADD command. The server will find all subdirectories
    within the path to watch, crossing filesystem boundaries, and add all
    these subdirectories to the current watch list. The "OK" message will
    contain the number of subdirectories added.

NOCROSS
(server, add)
    Completes a current ADD command. The server will find all subdirectories
    within the path to watch, but won't cross filesystem boundaries, and add
    all these subdirectories to the current watch list. The "OK" message will
    contain the number of subdirectories added.

EXCL NAME|PATH EXACT|ICASE|GLOB|IGLOB (match)
(server, add)
    This command must be between an ADD and its closing CROSS/NOCROSS. It
    indicates that subdirectories must be excluded: NAME or PATH specifies
    whether the "match" applies to a name or a full path; EXACT means that
    the path to excluded is specified exactly by "match"; ICASE is like
    EXACT, but it ignores case; GLOB specifies that "match" is a shell-style
    glob and all matching directories will be skipped; IGLOB is like GLOB
    but it ignores case. This command can be repeated as necesssary to
    exclude more things.

FIND NAME|PATH EXACT|ICASE|GLOB|IGLOB (match)
(server, add)
    This command must be between an ADD and its closing CROSS/NOCROSS. It
    modifies the ADD command by first finding all matching subdirectories
    within the "watch" specified by ADD, then executing a separate ADD
    command on each result. This command can be repeated, in which case a
    subdirectory is added if any of the FIND commands selects it. For example
    assuming the following directory structure:

    /home/user
    /home/user/dir1
    /home/user/dir1/a
    /home/user/dir1/b
    /home/user/dir2
    /home/user/dir2/c
    /home/user/dir2/d
    /home/user/dir3
    /home/user/dir3/e
    /home/user/dir3/f

    if the client sends:
    ADD (/home/user)
    EXCL NAME GLOB [de]
    FIND NAME GLOB dir[23]
    NOCROSS

    then the server will first execute the "FIND", resulting in the following:

    /home/user/dir2
    /home/user/dir3

    Inside these two directories, "b" and "d" are excluded, so the following
    watches will be added:

    /home/user/dir2
    /home/user/dir2/c
    /home/user/dir3
    /home/user/dir3/f

REMOVE (watch)
(server, remove)
    The server removes the watch and all its subdirectories from its list of
    current watches. There is no find/exclude mechanism like for ADD, but a
    client can always get the list of watches, select the ones to remove, and
    then issue the corresponding REMOVE commands.

CLOSELOG
(all, closelog)
    The server closes the current log file (it will reopen it next time it
    needs to write to it). This can be used after log rotation.

ENCRYPT
(all, read)
    The server and the client will negotiate a link encryption mechanism.
    This command is only supported if the server returns LINK_ENCRYPTION
    in reply to the "EXTENSIONS" command.

PURGE d
(server, purge)
    The server removes event files older than d days. d must be >= 2.

GETDIR (path) translate?
(server, read)
    reads the given directory and returns a multiline reply with one of
    the following formats (depending on whether "translate?" is zero or
    nonzero):

    type dnum ino mode uid gid size mtime ctime rmaj rmin (name) (target)
    type dnum ino mode uname uid gname gid size mtime ctime rmaj rmin (name) (target)

    The dnum and ino together uniquely identify the file on the server:
    these are just the contents of the st_dev and st_ino fields from the
    stat structure.

    The target field is the target of a symlink: for non symlinks it
    will be 0. For symlinks, it will be zero if the readlink() call failed.

    The mtime and ctime fields are the file modification time and the
    inode change time, respectively. They have format YYYY-MM-DD:HH:MM:SS

    See "EVENT" below for the format of the other fields.

    A line containing just a "." terminates the list.

STAT (path) translate?
(server, read)
    executes lstat on the path, and returns the same information as GETDIR,
    omitting the name:

    OK type dnum ino mode uid gid size mtime ctime rmaj rmin (target)
    OK type dnum ino mode uname uid gname gid size mtime ctime rmaj rmin (target)

STATFS (path)
(server, read)
    returns filesystem status for the filesystem on which path is mounted.
    The result will be like:

    OK blocksize blocktotal blockfree blockavail files ffree favail rw?

OPEN (path)
(server, read)
    Opens a file for reading on the server. This is used before copying the
    file data. Only one file can be open for reading at any time (for each
    client), so if another one is open it will be closed first.

CLOSEFILE
(server, read)
    Closes any file currently open for reading.

DATA start size
(server, read)
    Reads a data block of up to "size" bytes starting at position "start".
    This uses the file currently open for reading, and the command must be
    between an OPEN and a CLOSEFILE. The reply will contain a number
    following the "OK" to indicate the size of the data actually returned:
    this may be smaller than requested because an end of file confition is
    reached, or because the server has been configured with a buffer smaller
    than "size".

    If compression is requested, and the data block does become smaller as
    a result, two numbers are returned: the first one is the compressed
    data size, the second one the uncompressed.

CHECKSUM start size
(server, read)
    This command is only available if the server lists CHECKSUM in reply to
    the EXTENSIONS command.

    The server calculates the MD5 checksum of the file section of size
    (up to) "size", starting at "start", returning a reply of the form
    "OK realsize checksum", where "realsize" is the size of the data
    actually checksummed (which can be less than "size" if the file
    is shorter than "start" + "size" bytes). The checksum is omitted
    if the size is 0 (end of file).

    This can be used to avoid transferring part of a file if it is already
    on the client. This option is only available if

RSYNC start size
(server, read)
    This command is only available if the server lists RSYNC in reply to
    the EXTENSIONS command.

    The client wants to send a signature file and receive a delta file,
    as produced by librsync or rdiff. The client must have selected a file
    to operate against (using the OPEN) command. Start and size determine
    the part of the file being considered.

    If there is no error in the request, the server will reply with
    "OK rsize bzise", where "rsize" is the actual size it is going to consider
    (which may be smaller than the requested if the file is shorter than
    start + size), and "bzise" is the server's buffer size (see the
    SIGNATURE command).

    The client will then send the signature using a sequence of SIGNATURE
    commands, and retrieve the delta using the DELTA command repeatedly.

SIGNATURE [csize] size
(server, read)
    This command is only available if the server lists RSYNC in reply to
    the EXTENSIONS command.

    The client is sending the next block of the "rdiff" signature. Before
    sending this command, it must have used the "RSYNC" command to start
    the procedure. The "size" argument must be less than or equal to
    the server's buffer size, as returned by the "RSYNC" command.

    If just one number is provided by the command, the server waits for
    "size" bytes of data, then returns "OK" if they have been received
    correctly.

    If two numbers are provided by the client, "csize" must be less than
    "size". The server waits for "csize" bytes of data and uncompresses
    them; the uncompressed data must be of size "size" (or else the
    server will produce an error). Again, the server returns "OK"  if the
    data has been received and uncompressed correctly.

DELTA size
(server, read)
    This command is only available if the server lists RSYNC in reply to
    the EXTENSIONS command.

    This command is only valid if the client has requested a delta file
    using the RSYNC command, and has finished sending the signature. The
    server will now send the next block of up to "size" bytes. The reply
    will be similar to the DATA command: an OK with one or two numbers,
    depending on whether compression was enabled and useful, then the
    actual data block. An empty data block ("OK 0") indicates the end of
    the delta file.

SETCHECKSUM name
(server, read)
    This command is only available if the server lists CHECKSUM in reply to
    the EXTENSIONS command.

    Changes the type of checksum calculated by the CHECKSUM command from the
    default MD5 to another supported method.

LISTCHECKSUM
(server, read or getconf)
    This command is only available if the server lists CHECKSUM in reply to
    the EXTENSIONS command.

    Returns a multiline result listing the checksum methods supported.
    The lines in the reply are terminated with a normal newline rather
    than a carriage return, new line pair. A line containing just "__END__"
    indicates the end of the list.

BWLIMIT n
(server, read)
    Asks the next DATA commands to limit bandwidth to n kilobytes/second.
    The limit is an average, and the data may be produced in small bursts.
    A value of 0 removes any existing limit.

COMPRESS name
(server, read)
    Asks the next DATA commands to compress the data using the given
    compression method. For best result, use a large-ish data block in
    the DATA command.

LISTCOMPRESS
(server, read or getconf)
    Returns a multiline result listing the compression methods supported.
    The lines in the reply are terminated with a normal newline rather
    than a carriage return, new line pair. A line containing just "__END__"
    indicates the end of the list.

WATCHES
(server, watches)
    Returns a multiline reply, in which each watch in the current list is
    sent as size followed by path. A size 0 indicates the end of the list.

CONFIG
(all, getconf)
    Returns the current server's configuration as a multiline reply.
    A line containing just "__END__" indicates the end of the configuration.

SETROOT file pos (prefix) translate
(server, read)
    Prepares to send events from server to client. The "file" and "pos"
    numbers identify the event log file and position at which the server
    will start reading events (presumably this is where the client left
    off on the previous connection). The "prefix" indicates that only
    events referring to files inside the prefix will be returned (there
    are two exceptions to this: an "add watch" event can be returned if
    it contains the prefix, and a "rename" event can be returned if either
    its "from" or its "to" path are inside, but one of the two paths may
    be outside the prefix). "translate" indicates whether the server will
    send numeric user and group IDs (0) or names (nonzero).

EVENT timeout max
(server, read)
    Requests the next event from the server; the server will wait up to
    "timeout" seconds for an event; a value of 0 means that the server will
    not wait at all for new events, but will still return events if they
    are available; a negative value disables the timeout.

    The "max" argument, if positive, indicates the maximum event size:
    this includes all variable parts (such as filenames), but not fixed
    parts such as event data structures. It is intended to allow the client
    to preallocate buffers. A negative value will accept all events.

    The "OK" reply has three possible formats:

    OK NO

    No events are available and the timeout expired.

    OK BIG size

    An event is available but is bigger than the requested "max". The size
    returned is the total size of the variable parts.

    OK EV file pos evtype filetype stat? time? (from) (to)

    A new event is available and is being returned.

    file and pos identify the next event (so the client can update its
    records in case it needs to reissue SETROOT), evtype is the event
    type, described below, filetype is the file type, described below,
    stat? and time? indicate whether some other information will follow,
    and from and to are two paths associated with the event (rename event
    will have both, other events may have just from, or no path - if a
    path is not provided, it is sent as 0).

    If stat? is nonzero, then some file information follows after the paths;
    if "translate" was zero in the last SETROOT this will have format:

    STAT mode uid gid size rmaj rmin

    which correspond to the contents of a stat structure (rmaj and
    rmin are only meaningful for device files, and correspond to the
    two components of the st_rdev field).

    If "translate" was nonzero, the information has the format:

    NSTAT mode user_name uid group_name gid size rmaj rmin

    If time? is nonzero, the file modification time is returned after the
    paths and the STAT/NSTAT (if present). In general, if stat? is nonzero
    then time? is also nonzero, but it is possible to have time? nonzero
    when stat? is zero, for events which have a timestamp but no other
    information. The format of this information is:

    MTIME YYYY-MM-DD:HH:MM:SS

    The event type is one of:

    evtype   stat?  time?    description

    0            1      1    metadata changed
    1            1      1    file data changed
    2            1      1    new file or dir created
    3            0      0    file or dir deleted
    4            1      1    file or directory renamed 
    5            0      0    events were lost
    6            0      0    block size too small: event could not be stored
    7            0      1    tree was added to the watch list
    8            1      1    new name was added to an existing file (hard link)

    The file type is one of:

    filetype    description

    0           regular file
    1           directory
    2           character device
    3           block device
    4           fifo (named pipe)
    5           symlink
    6           socket
    7           unknown

IGNORE evtype (file1) (file2)
(server, ignore)
    This command is only available if the server lists IGNORE in the reply
    to the EXTENSIONS command.

    The server will ignore the next event with given type on the two specified
    files (if a rename) or on "file1" (if any other event). This can be used
    in a multi-master setup to prevent replication loops.

DIRSYNC (path)
(all, dirsync)
    This command is only available if the server lists DIRSYNC in the reply
    to the EXTENSIONS command.

    The server will schedule an immediate directory synchronisation on the
    directory tree with root at "path", which is interpreted relative to
    the copy directory (use an empty path or "." for a full synchronisation).

UPDATE (arg)
(all, setconf)
    This command is only available if the server lists UPDATE in the reply
    to the EXTENSIONS command.

    The first time a client uses this command, the server makes a copy of
    its current configuration; then the provided argument is parsed as
    though it had been read from a configuration file (with the exception
    that comments are not recognised). Returns "OK" or a message explaining
    why the update failed.

    The special argument "commit" copies back the updated configuration to
    the live configuration: subsequent operations will use the new
    configuration. This is only possible if all updates were successful.

    The special argument "rollback" discards updates since the last commit
    (or all updates if the client has not issued any commit).

    When the client closes connection, all updates which have not been
    committed will be discarded (so a final "rollback" is not necessary,
    but a final "commit" is).

